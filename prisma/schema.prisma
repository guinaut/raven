// schema.prisma
// npx prisma generate
// npx prisma db push
// npx prisma studio

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Raven {
  id              String           @default(cuid()) @id
  topic           String
  directive       String
  guidance        String    
  plan            String
  state           RavenState      @default(READY)
  author          User?           @relation(fields: [authorId], references: [id])
  authorId        String?
  recipients      Recipient[]
  total_messages  Int             @default(0)
  analysis        Json?
  send_type       RecipientType   @default(PUBLIC)
  updatedAt       DateTime        @updatedAt @map(name: "updated_at")
  @@map(name: "ravens")
}

model Recipient {
  id              String          @default(cuid()) @id
  raven           Raven           @relation(fields: [ravenId], references: [id])
  ravenId         String
  short_link_id   Int             @default(autoincrement())
  short_link      String?         // set when raven is sent. further protection to prevent multiple sends
  public_key      String?         // this is either a uuid or an email address of the contact
  private_email   String?         // this is the email address of the contact
  contact         Contact?        @relation(fields: [contactId], references: [id])
  contactId       String?
  messages        Message[]
  findings        Json?
  createdAt       DateTime        @default(now()) @map(name: "created_at")
  updatedAt       DateTime        @updatedAt @map(name: "updated_at")
  @@map(name: "recipients")
}

model Message {
  id              String          @default(cuid()) @id
  role            String
  content         Json
  recipient       Recipient?      @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId     String?
  createdAt       DateTime        @default(now()) @map(name: "created_at")
  @@map(name: "messages")
}

model User {
  id              String          @default(cuid()) @id
  external_id     String          @unique
  name            String?
  about           String?
  email           String?         @unique
  createdAt       DateTime        @default(now()) @map(name: "created_at")
  updatedAt       DateTime        @updatedAt @map(name: "updated_at")
  ravens          Raven[]
  contacts        Contact[]
  @@map(name: "users")
}

model Contact {
  id              String          @default(cuid()) @id
  name            String?
  email           String?         @unique
  unsubscribed    Boolean         @default(false)
  user            User            @relation(fields: [userId], references: [id])
  userId          String
  recipients      Recipient[]
  createdAt       DateTime        @default(now()) @map(name: "created_at")
  updatedAt       DateTime        @updatedAt @map(name: "updated_at")
  @@map(name: "contacts")
}

enum RavenState {
  READY
  ACTIVE
  COMPLETE
  CANCELED
}

enum RecipientType {
  PRIVATE
  PUBLIC
}